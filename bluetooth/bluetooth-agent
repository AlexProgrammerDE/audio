#!/usr/bin/python
# Bluez authentication agent
# Based on https://git.kernel.org/pub/scm/bluetooth/bluez.git/tree/test/simple-agent
# and https://github.com/nicokaiser/rpi-audio-receiver/blob/master/install-bluetooth.sh

from __future__ import absolute_import, print_function, unicode_literals
import argparse
from gi.repository import GLib

import os
import sys
import dbus
import dbus.service
import dbus.mainloop.glib

# Bluez DBus constants
BUS_NAME = "org.bluez"
BUS_OBJECT = "/org/bluez"
AGENT_INTERFACE = "org.bluez.Agent1"
MANAGER_INTERFACE = "org.bluez.AgentManager1"
DEVICE_INTERFACE = "org.bluez.Device1"

# Agent default settings
capabilities = [ "KeyboardDisplay", "NoInputNoOutput" ]
DEFAULT_CAPABILITY = "NoInputNoOutput"
DEFAULT_PIN_CODE = "0000"

def valid_pin_code(pin_code):
    try:
        int_pin_code = int(pin_code)
    except:
        return False
    return len(pin_code) > 0 and len(pin_code) <= 6 and int_pin_code >= 0 and int_pin_code <= 999999

def set_trusted(path):
    props = dbus.Interface(bus.get_object(BUS_NAME, path), "org.freedesktop.DBus.Properties")
    props.Set(DEVICE_INTERFACE, "Trusted", True)

class Agent(dbus.service.Object):
    exit_on_release = True

    def __init__(self, bus, path, pin_code):
        self.pin_code = pin_code
        super(Agent, self).__init__(bus, path)

    def set_exit_on_release(self, exit_on_release):
        self.exit_on_release = exit_on_release

    @dbus.service.method(AGENT_INTERFACE, in_signature="", out_signature="")
    def Release(self):
        print("Release")
        if self.exit_on_release:
            mainloop.quit()

    @dbus.service.method(AGENT_INTERFACE, in_signature="os", out_signature="")
    def AuthorizeService(self, device, uuid):
        print("AuthorizeService (%s, %s)" % (device, uuid))
        set_trusted(device)
        return

    @dbus.service.method(AGENT_INTERFACE, in_signature="o", out_signature="s")
    def RequestPinCode(self, device):
        print("RequestPinCode (%s)" % (device))
        set_trusted(device)
        return self.pin_code

    @dbus.service.method(AGENT_INTERFACE, in_signature="o", out_signature="u")
    def RequestPasskey(self, device):
        print("RequestPasskey (%s)" % (device))
        set_trusted(device)
        return dbus.UInt32(PIN_CODE)

    @dbus.service.method(AGENT_INTERFACE, in_signature="ouq", out_signature="")
    def DisplayPasskey(self, device, passkey, entered):
        print("DisplayPasskey (%s, %06u entered %u)" % (device, passkey, entered))

    @dbus.service.method(AGENT_INTERFACE, in_signature="os", out_signature="")
    def DisplayPinCode(self, device, pincode):
        print("DisplayPinCode (%s, %s)" % (device, pincode))

    @dbus.service.method(AGENT_INTERFACE, in_signature="ou", out_signature="")
    def RequestConfirmation(self, device, passkey):
        print("RequestConfirmation (%s, %06d)" % (device, passkey))
        set_trusted(device)
        return

    @dbus.service.method(AGENT_INTERFACE, in_signature="o", out_signature="")
    def RequestAuthorization(self, device):
        print("RequestAuthorization (%s)" % (device))
        set_trusted(device)
        return

    @dbus.service.method(AGENT_INTERFACE, in_signature="", out_signature="")
    def Cancel(self):
        print("Cancel")

if __name__ == "__main__":
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    bus = dbus.SystemBus()

    # Parse command line options
    parser = argparse.ArgumentParser(description='Balena bluez authentication agent')
    parser.add_argument("-c", "--capability", dest="capability", choices=capabilities, default=DEFAULT_CAPABILITY, help="Define the bluez agent capability. Defaults to 'NoInputNoOutput'.")
    parser.add_argument("-p", "--pincode", dest="pin_code", default=DEFAULT_PIN_CODE, help="Set PIN Code to be used for authentication. Only used if running in legacy mode (SSP off). Defaults to '0000'")
    args = parser.parse_args()

    # Set agent settings
    capability = args.capability or DEFAULT_CAPABILITY
    pin_code = args.pin_code if valid_pin_code(args.pin_code) else DEFAULT_PIN_CODE

    # Create and register bluetooth agent
    path = "/test/agent"
    agent = Agent(bus, path, pin_code)
    obj = bus.get_object(BUS_NAME, BUS_OBJECT)
    manager = dbus.Interface(obj, MANAGER_INTERFACE)
    manager.RegisterAgent(path, capability)
    manager.RequestDefaultAgent(path)

    # Log agent info
    print("Bluetooth agent started:")
    print("- Capability: %s" % (capability))
    print("- PIN Code: %s" % (pin_code if capability == "KeyboardDisplay" else "not required"))

    mainloop = GLib.MainLoop()
    mainloop.run()
